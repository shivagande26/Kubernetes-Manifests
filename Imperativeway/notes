kubectl create configmap <configmapname> --from-literal=<key>=<value>
kubectl create configmap <configmapname> --from-file=<path-to-the-file>

apiVersion: v1
kind: Pod
metadata:
  name: webapp
spec:
  containers:
  - name: app
    image: nginx
    ports:
    - containerPort: 80
    envFrom:
    - configMapRef:
      name: <nameofconfigmap>
or

    env:
    - name: APP_COLOR
      valueFrom:
        configMapKeyRef:
          name: <configmapname>
          key: <keyinsideconfigmap>

kubectl create secret generic <secretname> --from-literal=<key>=<value>
kubectl create secret generic <secretname> --from-file=<pathtothefile>

apiVersion: v1
kind: Pod
metadata:
  name: webapp
spec:
  containers:
  - name: webapp
    image: nginx
    ports:
    - containerPort: 80
    envFrom:
    - secretRef:
        name: <secretname>

or
    env:
    - name: DB_PASSWORD
      valueFrom:
        secretKeyRef:
          name: <secretname>
          key: <keyinsidesecret>


apiVersion: v1
kind: Pod
metadata:
  name: webapp
spec:
  securityContext:
    runAsUser: 1000
  containers:
  - name: webapp
    image: nginx
    ports:
    - containerPort: 80
    securityContext:
      runAsUser: 1000
      capabilities:
        add: ["MAC_ADMIN"]

kubectl get po --selector env=dev --no-headers | wc -l

kubectl rollout status deployment/<deployment_name>

kubectl rollout history deployment/<deployment_name>
kubectl rollout undo deployment/<deployment_name>
kubectl rollout undo deployment/<deployment_name> --to-revision=<revision_number>